<?xml version="1.0" encoding="UTF-8"?>
<project name="world" default="all" basedir="." xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:jacoco="antlib:org.jacoco.ant">

	<!-- Note: Commons-confiuration goes into flume directory -->
	<property environment="env" />

	<property name="name" value="world" />
	<property name="build.dir" value="${basedir}/build" />
	<property name="map.dir" value="${basedir}/web/data" />
	<property name="debug" value="true" />
	<property name="debuglevel" value="source,lines,vars" />
	<property name="deprecation" value="off" />
	<property name="optimize" value="off" />
	<property name="nowarn" value="on" />
	<property name="jvm.deprecation" value="-Xlint:deprecation" />
	<property name="jvm.args" value="-Xmx1024m -Xms256m " />
	<property name="jvm.debug.args" value="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000" />
	<property name="target" value="1.8" />
	<property name="source" value="1.8" />
	<property name="test.name" value="Test*" />
	<property name="database.name" value="world" />
	<property name="test.url" value="http://localhost/projections" />
	<property name="authorize.service.url" value="${test.url}/authorize/login" />
	<property name="rest.service.url" value="${test.url}/classes/" />
	<property name="web.service.url" value="${test.url}/web/classes/" />
	<property name="war.service.name" value="world" />
	<property name="tomcat.dir" value="tomcat" />
	<property name="tomcat.home" value="/opt/${tomcat.dir}" />
	<property name="service.name" value="TomEE" />
	<property name="version" value="1.0" />
	<property name="logfile" value="${basedir}/build/logs/test.log" />

	<!-- =================================================================== -->
	<!-- Defines the classpath used for compilation and test. -->
	<!-- =================================================================== -->
	<path id="classpath.main">
		<pathelement path="${build.dir}/classes" />
		<pathelement location="${build.dir}/${name}.jar" />
		<fileset dir="${basedir}/lib" includes="**/*.jar" />
	</path>
	<path id="classpath.tools">
		<fileset dir="${basedir}/lib" includes="**/*.jar" />
	</path>
	<!-- =================================================================== -->
	<!-- Task Definitions -->
	<!-- =================================================================== -->
	<taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask" classpathref="classpath.tools" />
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml" classpathref="classpath.tools" />
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="classpath.tools" />
	<!-- =================================================================== -->
	<!-- Clean up, only files under source control remain -->
	<!-- =================================================================== -->
	<target name="clean">
		<delete quiet="true" dir="${build.dir}" />
		<delete quiet="true" dir="${map.dir}" />
		<delete quiet="true" dir="${basedir}/srcgen" />
		<delete quiet="true" dir="${basedir}/doc/api" /> 
	</target>
	<!-- =================================================================== -->
	<!-- Prepares the build directory -->
	<!-- =================================================================== -->
	<target name="prepare">
		<tstamp />
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dir}/classes" />
		<mkdir dir="${build.dir}/logs" />
		<mkdir dir="${build.dir}/maps" />
		<mkdir dir="${build.dir}/reports/raw" />
		<mkdir dir="${basedir}/doc/api" />
		<mkdir dir="${basedir}/srcgen" />
		<mkdir dir="${basedir}/lib/libdev" />
		<mkdir dir="${basedir}/lib/libgen" />
		<mkdir dir="${map.dir}" />
	</target>
	<!-- =================================================================== -->
	<!-- Update the junit in the ant directory -->
	<!-- =================================================================== -->
	<target name="resolve" depends="prepare">
		<ivy:retrieve pattern="${basedir}/lib/[conf]/[artifact]-[revision].[ext]" conf="*" />
		<ivy:report conf="*" todir="${build.dir}" />
	</target>
	<!-- =================================================================== -->
	<target name="srcgen" depends="resolve">
		<xjc schema="${basedir}/etc/world.xsd" destdir="${basedir}/srcgen" package="com.viper.world.model">
			<arg value="-npa" />
		</xjc>
	</target>
	<!-- =================================================================== -->
	<!-- Compile all sources -->
	<!-- =================================================================== -->
	<target name="compile" depends="srcgen">
		<javac srcdir="srcgen:src:unit" destdir="${build.dir}/classes" nowarn="${nowarn}" debug="${debug}" source="${source}" target="${target}" deprecation="${deprecation}" optimize="${optimize}">
			<classpath refid="classpath.main" />
		</javac>
	</target>
	<!-- =================================================================== -->
	<!-- Build jar file -->
	<!-- =================================================================== -->
	<target name="jar" depends="compile">
		<manifest file="${basedir}/build/info.txt">
			<attribute name="Manifest-Version" value="1.0" />
			<attribute name="Sealed" value="false" />
			<attribute name="MainTest-Version" value="${version}" />
			<attribute name="Build-Date" value="${TODAY}" />
			<attribute name="Build-Time" value="${TSTAMP}" />
		</manifest>
		<jar jarfile="${build.dir}/${name}.jar" manifest="${build.dir}/info.txt">
			<fileset dir="${build.dir}/classes" includes="**" />
		</jar>
	</target>
	<target name="src.jar">
		<jar jarfile="${build.dir}/${name}-src.jar">
			<zipfileset dir="${basedir}" prefix="${name}" includes="docs/**" />
			<zipfileset dir="${basedir}" prefix="${name}" includes="etc/**" />
			<zipfileset dir="${basedir}" prefix="${name}" includes="src/**" />
			<zipfileset dir="${basedir}" prefix="${name}" includes="srcgen/**" />
			<zipfileset dir="${basedir}" prefix="${name}" includes="unit/**" />
			<zipfileset dir="${basedir}" prefix="${name}" includes="web/**" />
			<zipfileset dir="${basedir}" prefix="${name}" includes="*" />
			<zipfileset dir="${basedir}" prefix="${name}" includes="*.*" />
		</jar>
	</target>
	<!-- =================================================================== -->
	<!-- Create a war file for distribution -->
	<!-- =================================================================== -->
	<target name="war" depends="jar">
		<war destfile="${build.dir}/${name}.war" webxml="${basedir}/web/WEB-INF/web.xml">
			<fileset dir="${basedir}/web" excludes="WEB-INF/**" />
			<fileset dir="${basedir}/etc" />
			<lib dir="${build.dir}" includes="*.jar" />
			<lib dir="${basedir}/lib" includes="*.jar" />
			<lib dir="${basedir}/lib/libgen" includes="*.jar" />
			<lib dir="${basedir}/lib/local" includes="*.jar" />
		</war>
	</target>
	<!-- =================================================================== -->
	<!-- deploy to server -->
	<!-- =================================================================== -->
	<target name="deploy" depends="war">
		<delete quiet="true">
			<fileset dir="${tomcat.home}/logs" includes="*.*" />
			<fileset dir="${tomcat.home}/webapps/${name}" includes="*.*" />
			<fileset dir="${tomcat.home}/webapps" includes="${name}.war" />
		</delete>
		<copy tofile="${tomcat.home}/webapps/${name}.war" flatten="true">
			<fileset file="${build.dir}/${name}.war" />
		</copy>
	</target>
	<!-- =================================================================== -->
	<!-- Creates the API documentation -->
	<!-- =================================================================== -->
	<target name="javadocs">
		<javadoc packagenames="*" sourcepath="${basedir}/src" destdir="${basedir}/doc/api" author="true" version="true" windowtitle="${name} ${version} API" doctitle="${Name}" footer="Copyright &amp;copy; 1997-2019 Viper Software. See &lt;a target=&quot;_top&quot; href=&quot;../license.html&quot;&gt;license agreement&lt;/A&gt; for rights granted.">
			<classpath refid="classpath.main" />
		</javadoc>
	</target>
	<!-- =================================================================== -->
	<!-- Map Conversion Targets - convert the wdb2 files to xml form -->
	<!-- one xml file for all input files. uses java code -->
	<!-- =================================================================== -->
	<target name="map-xml" depends="jar">
		<echo message="LOGGING => ${logfile}" />
		<java fork="true" classname="com.viper.tools.WDBII" classpathref="classpath.main" error="${logfile}" append="true">
			<arg line="-res 3600" />
			<arg line="-output ${map.dir}/world-60.xml" />
			<arg value="${basedir}/etc/data/africa-bdy.txt" />
			<arg value="${basedir}/etc/data/africa-cil.txt" />
			<arg value="${basedir}/etc/data/africa-riv.txt" />
			<arg value="${basedir}/etc/data/asia-bdy.txt" />
			<arg value="${basedir}/etc/data/asia-cil.txt" />
			<arg value="${basedir}/etc/data/asia-riv.txt" />
			<arg value="${basedir}/etc/data/europe-bdy.txt" />
			<arg value="${basedir}/etc/data/europe-cil.txt" />
			<arg value="${basedir}/etc/data/europe-riv.txt" />
			<arg value="${basedir}/etc/data/namer-bdy.txt" />
			<arg value="${basedir}/etc/data/namer-cil.txt" />
			<arg value="${basedir}/etc/data/namer-pby.txt" />
			<arg value="${basedir}/etc/data/namer-riv.txt" />
			<arg value="${basedir}/etc/data/samer-bdy.txt" />
			<arg value="${basedir}/etc/data/samer-cil.txt" />
			<arg value="${basedir}/etc/data/samer-riv.txt" />
			<jvmarg line="${jvm.args}" />
		</java>
	</target>
	<!-- =================================================================== -->
	<!-- Map Conversion Targets - convert the wdb2 files to svg form -->
	<!-- one svg file for all input files. uses java code -->
	<!-- =================================================================== -->
	<target name="map-svg" depends="jar">
		<echo message="LOGGING => ${logfile}" />
		<java classname="com.viper.tools.WorldToSVG" classpathref="classpath.main" error="${logfile}" append="true">
			<arg line="-res 60" />
			<arg line="-output ${map.dir}/world-60.svg" />
			<arg value="${basedir}/etc/data/africa-bdy.txt" />
			<arg value="${basedir}/etc/data/africa-cil.txt" />
			<arg value="${basedir}/etc/data/africa-riv.txt" />
			<arg value="${basedir}/etc/data/asia-bdy.txt" />
			<arg value="${basedir}/etc/data/asia-cil.txt" />
			<arg value="${basedir}/etc/data/asia-riv.txt" />
			<arg value="${basedir}/etc/data/europe-bdy.txt" />
			<arg value="${basedir}/etc/data/europe-cil.txt" />
			<arg value="${basedir}/etc/data/europe-riv.txt" />
			<arg value="${basedir}/etc/data/namer-bdy.txt" />
			<arg value="${basedir}/etc/data/namer-cil.txt" />
			<arg value="${basedir}/etc/data/namer-pby.txt" />
			<arg value="${basedir}/etc/data/namer-riv.txt" />
			<arg value="${basedir}/etc/data/samer-bdy.txt" />
			<arg value="${basedir}/etc/data/samer-cil.txt" />
			<arg value="${basedir}/etc/data/samer-riv.txt" />
			<jvmarg line="${jvm.args}" />
		</java>
	</target>
	<!-- =================================================================== -->
	<!-- Map Conversion Targets - convert the wdb2 files to svg form -->
	<!-- one svg file for all input files. uses java code -->
	<!-- =================================================================== -->
	<target name="map-main" depends="jar">
		<echo message="LOGGING => ${logfile}" />
		<java classname="com.viper.tools.WorldMain" classpathref="classpath.main" error="${logfile}" append="true">
			<arg line="-svg 0.1 ${map.dir}/world-1.svg" />
			<arg line="-coastline ${basedir}/etc/data/africa-cil.txt" />
			<arg line="-coastline ${basedir}/etc/data/asia-cil.txt" />
			<arg line="-coastline ${basedir}/etc/data/europe-cil.txt" />
			<arg line="-coastline ${basedir}/etc/data/namer-cil.txt" />
			<arg line="-coastline ${basedir}/etc/data/samer-cil.txt" />
			<arg line="-river ${basedir}/etc/data/africa-riv.txt" />
			<arg line="-river ${basedir}/etc/data/asia-riv.txt" />
			<arg line="-river ${basedir}/etc/data/europe-riv.txt" />
			<arg line="-river ${basedir}/etc/data/namer-riv.txt" />
			<arg line="-river ${basedir}/etc/data/samer-riv.txt" />
			<arg line="-boundary ${basedir}/etc/data/africa-bdy.txt" />
			<arg line="-boundary ${basedir}/etc/data/asia-bdy.txt" />
			<arg line="-boundary ${basedir}/etc/data/europe-bdy.txt" />
			<arg line="-boundary ${basedir}/etc/data/namer-bdy.txt" />
			<arg line="-boundary ${basedir}/etc/data/samer-bdy.txt" />
			<arg line="-states ${basedir}/etc/data/africa-cil.txt" />
			<arg line="-states ${basedir}/etc/data/asia-cil.txt" />
			<arg line="-states ${basedir}/etc/data/europe-cil.txt" />
			<arg line="-states ${basedir}/etc/data/namer-cil.txt" />
			<arg line="-states ${basedir}/etc/data/samer-cil.txt" />
			<arg line="-states ${basedir}/etc/data/namer-pby.txt" />
			<arg line="-cities ${basedir}/docs/latlng.txt" />
			<arg line="-labels ${basedir}/docs/labels.txt" />
			<!-- <arg line="-connections ${basedir}/docs/connect.txt" /> -->
			<jvmarg line="${jvm.args}" />
		</java>
	</target>
	<!-- =================================================================== -->
	<!-- Map Conversion Targets - convert the wdb2 files to svg form -->
	<!-- one svg file for all input files. uses java code -->
	<!-- =================================================================== -->
	<target name="viewer">
		<java classname="com.viper.tools.WorldParser" fork="true" dir="${basedir}">
			<arg line="-xml etc/maps/world-60.xml" />
			<arg line="-show" />
			<classpath refid="classpath.main" />
			<jvmarg line="${jvm.args}" />
		</java>
	</target>
	<!-- =================================================================== -->
	<!-- Runs the test -->
	<!-- =================================================================== -->
	<target name="junit-report">
		<junitreport todir="${build.dir}/reports/raw">
			<fileset dir="${build.dir}/reports/raw" includes="TEST-*.xml" />
			<report format="frames" todir="${build.dir}/reports" />
		</junitreport>
	</target>
	<target name="jacoco-report">
		<jacoco:report>
			<executiondata>
				<file file="${build.dir}/jacoco.exec" />
			</executiondata>
			<structure name="Projectionss Project">
				<classfiles>
					<fileset dir="${build.dir}/classes" />
				</classfiles>
				<sourcefiles encoding="UTF-8">
					<fileset dir="${basedir}/src" />
					<fileset dir="${basedir}/srcgen" />
					<fileset dir="${basedir}/unit" />
				</sourcefiles>
			</structure>
			<html destdir="${build.dir}/jacoco/" />
		</jacoco:report>
	</target>
	<target name="junit">
		<jacoco:coverage destfile="${build.dir}/jacoco.exec">
			<junit fork="true" forkmode="once" printsummary="yes" haltonfailure="no" showoutput="yes" timeout="6000000">
				<sysproperty key="jub.consumers" value="H2" />
				<sysproperty key="jub.charts.dir" value="${basedir}/benchmarks" />
				<sysproperty key="jub.db.file" value="${basedir}/benchmarks/.benchmarks" />
				<sysproperty key="basedir" value="${basedir}" />
				<classpath>
					<path refid="classpath.main" />
				</classpath>
				<formatter type="xml" />
				<batchtest fork="true" haltonfailure="no" todir="${build.dir}/reports/raw">
					<fileset dir="${basedir}/unit" includes="com/viper/**/Test*.java" />
					<fileset dir="${basedir}/srcgen" includes="com/viper/**/Test*.java" />
					<formatter type="xml" />
				</batchtest>
				<jvmarg line="${jvm.args}" />
				<jvmarg value="-XX:-UseSplitVerifier" />
			</junit>
		</jacoco:coverage>
	</target>
	<!-- =================================================================== -->
	<target name="maps" depends="map-xml,map-svg,map-main" />
	<target name="test" depends="junit,junit-report " />
	<target name="cruise-control" depends="release" />
	<target name="release" depends="clean,all,src.jar,javadocs" /> 
	<target name="all" depends="jar,maps,war,test,deploy" />
</project>
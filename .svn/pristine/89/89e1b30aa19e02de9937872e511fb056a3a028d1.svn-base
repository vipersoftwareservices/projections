<?xml version="1.0" encoding="UTF-8"?>
<project name="world" default="all" basedir=".">

    <property name="common.home" value="${basedir}/../common" />
    <property name="database.home" value="${basedir}/../database" />

	<property file="${common.home}/build.properties" />
	
	<property name="name" value="world" />
	<property name="version" value="1.0" />
	<property name="build.dir" value="${basedir}/build" />
	<property name="logfile" value="${basedir}/build/logs/test.log" />

	<!-- =================================================================== -->
	<!-- Defines the classpath used for compilation and test.                -->
	<!-- =================================================================== -->
	<path id="base.classpath">
		<pathelement path="${build.dir}/classes" />
		<pathelement location="${build.dir}/${name}.jar" />
		<pathelement location="${database.home}/build/database.jar" />
		<pathelement location="${junit.jar}/" />
		<pathelement location="${emma.home}/lib/emma.jar" />
		<pathelement location="${emma.home}/lib/emma_ant.jar" />
	</path>

	<path id="classpath.server">
		<fileset dir="${glassfish.home}/modules" includes="**/*.jar" />
	</path>
	<!--  ===================================================================  -->

	<taskdef resource="emma_ant.properties" classpathref="base.classpath" />

	<taskdef name="xjc" classname="com.sun.tools.xjc.XJCTask" classpathref="classpath.server" />

	<!--  ===================================================================  -->
	<!--  Clean up, only files under source control remain                     -->
	<!--  ===================================================================  -->
	<target name="clean">
		<delete quiet="false" dir="${build.dir}" />
		<delete quiet="false" dir="${basedir}/srcgen" />
	</target>

	<!--  ===================================================================  -->
	<!--  Prepares the build directory                                         -->
	<!--  ===================================================================  -->
	<target name="prepare">
		<tstamp />
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.dir}/classes" />
		<mkdir dir="${build.dir}/logs" />
		<mkdir dir="${build.dir}/maps" />
		<mkdir dir="${build.dir}/reports" />
		<mkdir dir="${build.dir}/reports/raw" />
		<mkdir dir="${basedir}/srcgen" />

		<copy todir="${build.dir}" flatten="true">
			<fileset file="${basedir}/lib/world.dtd" />
		</copy>
	</target>

	<!--  ===================================================================  -->
	<target name="srcgen" depends="prepare">
		<xjc schema="${basedir}/etc/world.xsd" destdir="${basedir}/srcgen" package="com.viper.world.model">
			<arg value="-npa" />
		</xjc>
	</target>

	<!--  ===================================================================  -->
	<!--  Compile all sources                                                  -->
	<!--  ===================================================================  -->
	<target name="compile" depends="srcgen">
		<javac srcdir="${basedir}/srcgen:${basedir}/src" destdir="${build.dir}/classes" debug="${debug}" deprecation="${deprecation}" optimize="${optimize}">
			<classpath refid="base.classpath" />
		</javac>
	</target>

	<!--  ===================================================================  -->
	<!--  Build jar file                                                       -->
	<!--  ===================================================================  -->
	<target name="jar" depends="compile">
		<manifest file="${basedir}/build/info.txt">
			<attribute name="Manifest-Version" value="1.0" />
			<attribute name="Sealed" value="false" />
			<attribute name="MainTest-Version" value="${version}" />
			<attribute name="Build-Date" value="${TODAY}" />
			<attribute name="Build-Time" value="${TSTAMP}" />
		</manifest>
		<jar jarfile="${build.dir}/${name}.jar" manifest="${build.dir}/info.txt">
			<fileset dir="${build.dir}/classes" includes="**" />
		</jar>
	</target>

	<!--  ===================================================================  -->
	<!--  Runs the test                                                        -->
	<!--  ===================================================================  -->
	<target name="junit">
		<emma enabled="true">
			<instr instrpath="${build.dir}/classes" destdir="${build.dir}/emma/classes" metadatafile="${build.dir}/emma/metadata.emma" merge="true">
				<filter value="" />
			</instr>
		</emma>
		<junit fork='true' printsummary="yes" haltonfailure="no" showoutput="no">
			<sysproperty key="basedir" value="${basedir}" />
			<classpath>
				<pathelement path="${build.dir}/emma/classes" />
				<path refid="base.classpath" />
			</classpath>
			<formatter type="xml" />
			<batchtest fork="yes" haltonfailure="no" todir="${build.dir}/reports/raw">
				<fileset dir="${basedir}/src" includes="tests/*.java" />
				<formatter type="xml" />
			</batchtest>
			<jvmarg line="${jvm.args}" />
			<jvmarg value="-Demma.coverage.out.file=${build.dir}/emma/coverage.emma" />
			<jvmarg value="-Demma.coverage.out.merge=true" />
		</junit>
	</target>

	<!-- generate junit reports -->
	<target name="reports">
		<junitreport todir="${build.dir}/reports/raw">
			<fileset dir="${build.dir}/reports/raw">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${build.dir}/reports" />
		</junitreport>
		<emma enabled="true">
			<report sourcepath="${basedir}/src" sort="+block,+name,+method,+class" metrics="method:70,block:80,line:80,class:100">
				<fileset dir="${build.dir}/emma">
					<include name="*.emma" />
				</fileset>
				<txt outfile="${build.dir}/emma/coverage.txt" depth="package" columns="class,method,block,line,name" />
				<xml outfile="${build.dir}/emma/coverage.xml" depth="package" />
				<html outfile="${build.dir}/emma/coverage.html" depth="method" columns="name,class,method,block,line" />
			</report>
		</emma>
	</target>

	<!--  ===================================================================  -->
	<!--  Creates the API documentation                                        -->
	<!--  ===================================================================  -->
	<target name="javadocs">
		<javadoc packagenames="*" sourcepath="${basedir}/src" destdir="${basedir}/build/doc/api" author="true" version="true" windowtitle="${Name} ${version} API" doctitle="${Name}" footer="Copyright &amp;copy; 1997-2012 Viper Software. See &lt;a target=&quot;_top&quot; href=&quot;../license.html&quot;&gt;license agreement&lt;/A&gt; for rights granted.">
			<classpath refid="base.classpath" />
		</javadoc>
	</target>

	<!--  ===================================================================  -->
	<!--  Map Conversion Targets - convert the wdb2 files to xml form          -->
	<!--  one xml file for all input files. uses java code                     -->
	<!--  ===================================================================  -->
	<target name="map-xml" depends="jar">
		<echo message="LOGGING => ${logfile}" />
		<java fork="true" classname="com.viper.tools.WDBII" classpathref="base.classpath" error="${logfile}" append="true">
			<arg line="-res 3600" />
			<arg line="-output ${build.dir}/maps/world-60.xml" />
			<arg value="${basedir}/etc/wdbii/africa-bdy.txt" />
			<arg value="${basedir}/etc/wdbii/africa-cil.txt" />
			<arg value="${basedir}/etc/wdbii/africa-riv.txt" />
			<arg value="${basedir}/etc/wdbii/asia-bdy.txt" />
			<arg value="${basedir}/etc/wdbii/asia-cil.txt" />
			<arg value="${basedir}/etc/wdbii/asia-riv.txt" />
			<arg value="${basedir}/etc/wdbii/europe-bdy.txt" />
			<arg value="${basedir}/etc/wdbii/europe-cil.txt" />
			<arg value="${basedir}/etc/wdbii/europe-riv.txt" />
			<arg value="${basedir}/etc/wdbii/namer-bdy.txt" />
			<arg value="${basedir}/etc/wdbii/namer-cil.txt" />
			<arg value="${basedir}/etc/wdbii/namer-pby.txt" />
			<arg value="${basedir}/etc/wdbii/namer-riv.txt" />
			<arg value="${basedir}/etc/wdbii/samer-bdy.txt" />
			<arg value="${basedir}/etc/wdbii/samer-cil.txt" />
			<arg value="${basedir}/etc/wdbii/samer-riv.txt" />
			<jvmarg line="${jvm.args}" />
		</java>
	</target>

	<!--  ===================================================================  -->
	<!--  Map Conversion Targets - convert the wdb2 files to svg form          -->
	<!--  one svg file for all input files. uses java code                     -->
	<!--  ===================================================================  -->
	<target name="map-svg" depends="jar">
		<echo message="LOGGING => ${logfile}" />
		<java classname="com.viper.tools.WorldToSVG" classpathref="base.classpath" error="${logfile}" append="true">
			<arg line="-res 60" />
			<arg line="-output ${build.dir}/maps/world-60.svg" />
			<arg value="${basedir}/etc/wdbii/africa-bdy.txt" />
			<arg value="${basedir}/etc/wdbii/africa-cil.txt" />
			<arg value="${basedir}/etc/wdbii/africa-riv.txt" />
			<arg value="${basedir}/etc/wdbii/asia-bdy.txt" />
			<arg value="${basedir}/etc/wdbii/asia-cil.txt" />
			<arg value="${basedir}/etc/wdbii/asia-riv.txt" />
			<arg value="${basedir}/etc/wdbii/europe-bdy.txt" />
			<arg value="${basedir}/etc/wdbii/europe-cil.txt" />
			<arg value="${basedir}/etc/wdbii/europe-riv.txt" />
			<arg value="${basedir}/etc/wdbii/namer-bdy.txt" />
			<arg value="${basedir}/etc/wdbii/namer-cil.txt" />
			<arg value="${basedir}/etc/wdbii/namer-pby.txt" />
			<arg value="${basedir}/etc/wdbii/namer-riv.txt" />
			<arg value="${basedir}/etc/wdbii/samer-bdy.txt" />
			<arg value="${basedir}/etc/wdbii/samer-cil.txt" />
			<arg value="${basedir}/etc/wdbii/samer-riv.txt" />
			<jvmarg line="${jvm.args}" />
		</java>
	</target>

	<!--  ===================================================================  -->
	<!--  Map Conversion Targets - convert the wdb2 files to svg form          -->
	<!--  one svg file for all input files. uses java code                     -->
	<!--  ===================================================================  -->
	<target name="map-main" depends="jar">
		<echo message="LOGGING => ${logfile}" />
		<java classname="com.viper.tools.WorldMain" classpathref="base.classpath" error="${logfile}" append="true">
			<arg line="-svg 0.1 ${build.dir}/maps/world-1.svg" />
			<arg line="-coastline ${basedir}/etc/wdbii/africa-cil.txt" />
			<arg line="-coastline ${basedir}/etc/wdbii/asia-cil.txt" />
			<arg line="-coastline ${basedir}/etc/wdbii/europe-cil.txt" />
			<arg line="-coastline ${basedir}/etc/wdbii/namer-cil.txt" />
			<arg line="-coastline ${basedir}/etc/wdbii/samer-cil.txt" />
			<arg line="-river ${basedir}/etc/wdbii/africa-riv.txt" />
			<arg line="-river ${basedir}/etc/wdbii/asia-riv.txt" />
			<arg line="-river ${basedir}/etc/wdbii/europe-riv.txt" />
			<arg line="-river ${basedir}/etc/wdbii/namer-riv.txt" />
			<arg line="-river ${basedir}/etc/wdbii/samer-riv.txt" />
			<arg line="-boundary ${basedir}/etc/wdbii/africa-bdy.txt" />
			<arg line="-boundary ${basedir}/etc/wdbii/asia-bdy.txt" />
			<arg line="-boundary ${basedir}/etc/wdbii/europe-bdy.txt" />
			<arg line="-boundary ${basedir}/etc/wdbii/namer-bdy.txt" />
			<arg line="-boundary ${basedir}/etc/wdbii/samer-bdy.txt" />
			<arg line="-states ${basedir}/etc/wdbii/africa-cil.txt" />
			<arg line="-states ${basedir}/etc/wdbii/asia-cil.txt" />
			<arg line="-states ${basedir}/etc/wdbii/europe-cil.txt" />
			<arg line="-states ${basedir}/etc/wdbii/namer-cil.txt" />
			<arg line="-states ${basedir}/etc/wdbii/samer-cil.txt" />
			<arg line="-states ${basedir}/etc/wdbii/namer-pby.txt" />
			<arg line="-cities ${basedir}/docs/latlng.txt" />
			<arg line="-labels ${basedir}/docs/labels.txt" />
			<!-- <arg line="-connections ${basedir}/docs/connect.txt" /> -->
			<jvmarg line="${jvm.args}" />
		</java>
	</target>

	<!--  ===================================================================  -->
	<!--  Map Conversion Targets - convert the wdb2 files to svg form          -->
	<!--  one svg file for all input files. uses java code                     -->
	<!--  ===================================================================  -->
	<target name="view" depends="jar">
		<java classname="com.viper.tools.WorldParser" fork="true" dir="${basedir}">
			<arg line="-show" />
			<classpath refid="classpath.all" />
			<jvmarg line="${jvm.args}" />
		</java>
	</target>

	<!--  ===================================================================  -->

	<target name="maps" depends="map-xml,map-svg,map-main" />
	<target name="test" depends="junit,reports" />
	<target name="cruise-control" depends="clean,jar,test,javadocs" />
	<target name="all" depends="clean,jar,test" />
</project>
